name: Sync Echo and Create Nightly Releases

permissions:
  contents: write

on:
  schedule:
    - cron: '*/30 * * * *'  # Runs every 30 minutes
  workflow_dispatch:

jobs:
  sync-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout itsmechinmoy/echo
        uses: actions/checkout@v4
        with:
          repository: itsmechinmoy/echo
          token: ${{ secrets.PAT_TOKEN }}  # Use PAT for authentication
          fetch-depth: 0

      - name: Configure Git identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Check for new nightly build
        id: check-build
        run: |
          echo "Checking for new nightly build from brahmkshatriya/echo"
          RESPONSE=$(curl -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
                    -H "Accept: application/vnd.github+json" \
                    https://api.github.com/repos/brahmkshatriya/echo/actions/workflows/nightly.yml/runs?status=success)
          LATEST_RUN_ID=$(echo "$RESPONSE" | jq -r '.workflow_runs[0].id')
          echo "Latest successful run ID: $LATEST_RUN_ID"
          COMMIT_SHA=$(curl -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
                         -H "Accept: application/vnd.github+json" \
                         https://api.github.com/repos/brahmkshatriya/echo/actions/runs/$LATEST_RUN_ID \
                         | jq -r '.head_sha')
          echo "Latest commit SHA: $COMMIT_SHA"
          echo "LATEST_SHA=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "$COMMIT_SHA" > latest_sha.txt

      - name: Download last SHA artifact
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: echo.yml
          name: last-sha
          path: .
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          DEBUG_MESSAGE: "No previous last-sha artifact found. This is expected on the first run or if artifact expired."

      - name: Check if new build exists
        id: compare
        run: |
          LATEST_SHA=$(cat latest_sha.txt)
          echo "Latest SHA: $LATEST_SHA"
          
          if [ -f last_sha.txt ]; then
            LAST_SHA=$(cat last_sha.txt)
            echo "Last saved SHA: $LAST_SHA"
          else
            LAST_SHA=""
            echo "No previous SHA found."
          fi

          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Manual trigger detected. Forcing release."
            echo "SHOULD_RELEASE=true" >> $GITHUB_OUTPUT
          elif [ "$LATEST_SHA" == "$LAST_SHA" ]; then
            echo "No new commits found. Canceling the workflow."
            echo "SHOULD_RELEASE=false" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "New commit found. Continuing workflow."
            echo "SHOULD_RELEASE=true" >> $GITHUB_OUTPUT
          fi

      - name: Save Current SHA for Next Run
        if: ${{ steps.compare.outputs.SHOULD_RELEASE == 'true' }}
        run: |
          echo "Saving LATEST_SHA=$LATEST_SHA to last_sha.txt"
          cat latest_sha.txt > last_sha.txt
          cat last_sha.txt

      - name: Upload Current SHA as Artifact
        if: ${{ steps.compare.outputs.SHOULD_RELEASE == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: last-sha
          path: last_sha.txt
          retention-days: 7
        env:
          DEBUG_MESSAGE: "Uploading last-sha artifact"

      - name: Download Nightly Artifact
        if: ${{ steps.compare.outputs.SHOULD_RELEASE == 'true' }}
        id: download-artifact
        run: |
          LATEST_RUN_ID=$(curl -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
                        -H "Accept: application/vnd.github+json" \
                        https://api.github.com/repos/brahmkshatriya/echo/actions/workflows/nightly.yml/runs?status=success \
                        | jq -r '.workflow_runs[0].id')
          curl -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
               -H "Accept: application/vnd.github+json" \
               https://api.github.com/repos/brahmkshatriya/echo/actions/runs/$LATEST_RUN_ID/artifacts \
               | jq -r '.artifacts[0].archive_download_url' > artifact_url.txt
          
          ARTIFACT_URL=$(cat artifact_url.txt)
          echo "Downloading artifact from: $ARTIFACT_URL"
          curl -L -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
               -o artifact.zip "$ARTIFACT_URL"
          
          # Unzip the artifact
          unzip artifact.zip -d artifact_contents
          
          # Find the APK file
          APK_FILE=$(find artifact_contents -name "*.apk" | head -1)
          if [ -z "$APK_FILE" ]; then
            echo "No APK found in artifact!"
            exit 1
          fi
          echo "APK found: $APK_FILE"
          mv "$APK_FILE" app-release.apk
          
          # Verify APK exists and calculate SHA256 checksum
          if [ -f app-release.apk ]; then
            SHA256=$(sha256sum app-release.apk | awk '{print $1}')
            echo "Calculated SHA256: $SHA256"
            echo "APK_SHA256=$SHA256" >> $GITHUB_ENV
          else
            echo "Error: app-release.apk not found after move!"
            exit 1
          fi
          
          # Get commit SHA (already set in check-build)
          echo "COMMIT_SHA=$LATEST_SHA" >> $GITHUB_ENV
          
          # Create shortened tag for release
          SHORT_SHA=${LATEST_SHA:0:8}
          echo "RELEASE_TAG=$SHORT_SHA" >> $GITHUB_ENV
          
          # Get commit logs (fixed for single commit)
          REPO_URL="https://github.com/brahmkshatriya/echo"
          COMMIT_LOGS=$(git log --pretty=format:"● %s ~%an [֍](${REPO_URL}/commit/%H)" -n 1 $LATEST_SHA || echo "● No commit details available")
          if [ -z "$COMMIT_LOGS" ]; then
            COMMIT_LOGS="● No new commits for this release"
          fi
          COMMIT_LOGS=$(echo "$COMMIT_LOGS" | sed -E "s@#([0-9]+)@[#\1](${REPO_URL}/pull/\1)@g")
          echo -e "Commits:\n" > commit_log.txt
          echo "$COMMIT_LOGS" | sed 's/●/\n●/g' | sed '/^$/d' >> commit_log.txt
          echo -e "\n---\n" >> commit_log.txt
          echo -e "### Checksums\n" >> commit_log.txt
          echo "| Variant | SHA-256 |" >> commit_log.txt
          echo "| ------- | ------- |" >> commit_log.txt
          echo "| Universal | $SHA256 |" >> commit_log.txt
          
          echo "Commit log with checksums:"
          cat commit_log.txt

      - name: Check if Tag Exists
        if: ${{ steps.compare.outputs.SHOULD_RELEASE == 'true' }}
        id: check-tag
        run: |
          echo "Checking if tag ${{ env.RELEASE_TAG }} exists in itsmechinmoy/echo"
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
                         -H "Accept: application/vnd.github+json" \
                         https://api.github.com/repos/itsmechinmoy/echo/git/refs/tags/${{ env.RELEASE_TAG }})
          echo "API Response: $RESPONSE"
          if echo "$RESPONSE" | jq -e .ref > /dev/null; then
            echo "Tag ${{ env.RELEASE_TAG }} already exists"
            echo "TAG_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "Tag ${{ env.RELEASE_TAG }} does not exist"
            echo "TAG_EXISTS=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Delete Existing Tag
        if: ${{ steps.compare.outputs.SHOULD_RELEASE == 'true' && steps.check-tag.outputs.TAG_EXISTS == 'true' }}
        run: |
          echo "Deleting existing tag ${{ env.RELEASE_TAG }} in itsmechinmoy/echo"
          RESPONSE=$(curl -s -X DELETE \
               -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
               -H "Accept: application/vnd.github+json" \
               https://api.github.com/repos/itsmechinmoy/echo/git/refs/tags/${{ env.RELEASE_TAG }})
          echo "Delete API Response: $RESPONSE"
          if [ -z "$RESPONSE" ]; then
            echo "Tag ${{ env.RELEASE_TAG }} deleted successfully"
          else
            echo "Failed to delete tag. Response: $RESPONSE"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Create Tag in itsmechinmoy/echo
        if: ${{ steps.compare.outputs.SHOULD_RELEASE == 'true' }}
        run: |
          echo "Creating tag ${{ env.RELEASE_TAG }} in itsmechinmoy/echo"
          git tag -f ${{ env.RELEASE_TAG }} ${{ env.COMMIT_SHA }}
          git push origin ${{ env.RELEASE_TAG }} --force
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Set up SSH for Codeberg and GitLab
        if: ${{ steps.compare.outputs.SHOULD_RELEASE == 'true' }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -t rsa codeberg.org >> ~/.ssh/known_hosts
          ssh-keyscan -t rsa gitlab.com >> ~/.ssh/known_hosts

      - name: Prepare and push to Codeberg
        if: ${{ steps.compare.outputs.SHOULD_RELEASE == 'true' }}
        run: |
          git remote add codeberg git@codeberg.org:itsmechinmoy/echo.git
          git rm -f .github/workflows/echo.yml || echo "File not present, continuing"
          git commit -m "Remove workflow file for Codeberg sync" || echo "No changes to commit"
          git push codeberg main --force

      - name: Prepare and push to GitLab
        if: ${{ steps.compare.outputs.SHOULD_RELEASE == 'true' }}
        run: |
          git remote add gitlab git@gitlab.com:itsmechinmoy/echo.git
          git fetch gitlab
          git rm -f .github/workflows/echo.yml || echo "File not present, continuing"
          git commit -m "Remove workflow file for GitLab sync" || echo "No changes to commit"
          git merge gitlab/main --allow-unrelated-histories -m "Merge gitlab/itsmechinmoy/echo for sync" || {
            echo "Merge conflicts with gitlab, resolving by keeping GitHub state"
            git checkout origin/main -- .
            git add .
            git commit -m "Resolved GitLab merge conflict by keeping GitHub state"
          }
          git push gitlab main

      - name: Create or Update GitHub Release
        if: ${{ steps.compare.outputs.SHOULD_RELEASE == 'true' }}
        uses: ncipollo/release-action@v1
        with:
          owner: itsmechinmoy
          repo: echo
          tag: ${{ env.RELEASE_TAG }}
          name: New Echo Nightly Released
          bodyFile: commit_log.txt
          artifacts: app-release.apk
          draft: false
          prerelease: false
          token: ${{ secrets.PAT_TOKEN }}
          skipIfReleaseExists: false
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: false
          omitPrereleaseDuringUpdate: false
          replacesArtifacts: false
          allowUpdates: true
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
