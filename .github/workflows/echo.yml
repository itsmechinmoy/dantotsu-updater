name: Sync Echo and Create Releases
permissions:
  contents: write
on:
  schedule:
    - cron: '*/30 * * * *' # Runs every 30 minutes
  workflow_dispatch:
jobs:
  sync-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout itsmechinmoy/echo-nightly
        uses: actions/checkout@v4
        with:
          repository: itsmechinmoy/echo-nightly
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0
      - name: Configure Git identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      - name: Fetch latest commit from brahmkshatriya/echo
        run: |
          git remote add upstream https://github.com/brahmkshatriya/echo.git
          git fetch upstream --no-tags
          UPSTREAM_COMMIT_SHA=$(git rev-parse upstream/main)
          echo "UPSTREAM_COMMIT_SHA=$UPSTREAM_COMMIT_SHA" >> $GITHUB_OUTPUT
        id: fetch-upstream
      - name: Check for new commits
        id: check-commits
        run: |
          CURRENT_COMMIT_SHA=$(git rev-parse origin/main)
          if [ "$CURRENT_COMMIT_SHA" != "${{ steps.fetch-upstream.outputs.UPSTREAM_COMMIT_SHA }}" ]; then
            echo "SHOULD_SYNC=true" >> $GITHUB_OUTPUT
          else
            echo "SHOULD_SYNC=false" >> $GITHUB_OUTPUT
          fi
      - name: Sync commits from brahmkshatriya/echo
        if: ${{ steps.check-commits.outputs.SHOULD_SYNC == 'true' }}
        run: |
          git checkout main
          git merge upstream/main --allow-unrelated-histories -m "Sync with brahmkshatriya/echo main"
          git push origin main
      - name: Check for new nightly build
        id: check-build
        run: |
          echo "Checking for new nightly build from brahmkshatriya/echo"
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
                         -H "Accept: application/vnd.github+json" \
                         https://api.github.com/repos/brahmkshatriya/echo/actions/workflows/nightly.yml/runs?status=success)
          LATEST_RUN_ID=$(echo "$RESPONSE" | jq -r '.workflow_runs[0].id')
          if [ -z "$LATEST_RUN_ID" ] || [ "$LATEST_RUN_ID" == "null" ]; then
            echo "No successful nightly runs found!"
            echo "SHOULD_RELEASE=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          LATEST_COMMIT_SHA=$(echo "$RESPONSE" | jq -r '.workflow_runs[0].head_sha')
          echo "LATEST_RUN_ID=$LATEST_RUN_ID" >> $GITHUB_OUTPUT
          echo "LATEST_COMMIT_SHA=$LATEST_COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "$LATEST_RUN_ID" > latest_run_id.txt
          echo "$LATEST_COMMIT_SHA" > latest_commit_sha.txt
          echo "SHOULD_RELEASE=true" >> $GITHUB_OUTPUT
      - name: Download last run ID and commit SHA artifact
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: echo.yml
          name: last-sha
          path: .
          repo: itsmechinmoy/dantotsu-updater
          if_no_artifact_found: warn
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      - name: Check if new nightly build exists
        id: compare
        if: ${{ steps.check-build.outputs.SHOULD_RELEASE == 'true' }}
        run: |
          LATEST_RUN_ID=$(cat latest_run_id.txt)
          LATEST_COMMIT_SHA=$(cat latest_commit_sha.txt)
          if [ -f last_run_id.txt ] && [ -f last_commit_sha.txt ]; then
            LAST_RUN_ID=$(cat last_run_id.txt)
            LAST_COMMIT_SHA=$(cat last_commit_sha.txt)
            echo "LAST_RUN_ID=${LAST_RUN_ID}" >> $GITHUB_OUTPUT
            echo "LAST_COMMIT_SHA=${LAST_COMMIT_SHA}" >> $GITHUB_OUTPUT
          else
            LAST_RUN_ID=""
            LAST_COMMIT_SHA=""
            echo "LAST_RUN_ID=${LAST_RUN_ID}" >> $GITHUB_OUTPUT
            echo "LAST_COMMIT_SHA=${LAST_COMMIT_SHA}" >> $GITHUB_OUTPUT
          fi
          if [ "$LATEST_COMMIT_SHA" == "$LAST_COMMIT_SHA" ]; then
            echo "SHOULD_RELEASE=false" >> $GITHUB_OUTPUT
          else
            echo "SHOULD_RELEASE=true" >> $GITHUB_OUTPUT
          fi
      - name: Download Nightly Artifact
        if: ${{ steps.compare.outputs.SHOULD_RELEASE == 'true' }}
        id: download-artifact
        run: |
          LATEST_RUN_ID=$(cat latest_run_id.txt)
          curl -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
               -H "Accept: application/vnd.github+json" \
               https://api.github.com/repos/brahmkshatriya/echo/actions/runs/$LATEST_RUN_ID/artifacts \
               | jq -r '.artifacts[0].archive_download_url' > artifact_url.txt
          ARTIFACT_URL=$(cat artifact_url.txt)
          curl -L -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" -o artifact.zip "$ARTIFACT_URL"
          unzip artifact.zip -d artifact_contents
          APK_FILE=$(find artifact_contents -name "*.apk" | head -1)
          if [ -z "$APK_FILE" ]; then echo "No APK found"; exit 1; fi
          COMMIT_SHA=$(cat latest_commit_sha.txt)
          SHORT_SHA=${COMMIT_SHA:0:7}
          # Create tag name based on timestamp and short SHA
          TAG_NAME="nightly-$(date +%Y%m%d-%H%M%S)-${SHORT_SHA}"
          mv "$APK_FILE" "Echo-Nightly-${SHORT_SHA}-${{ github.run_id }}.apk"
          SHA256=$(sha256sum "Echo-Nightly-${SHORT_SHA}-${{ github.run_id }}.apk" | awk '{print $1}')
          echo "APK_FILE=Echo-Nightly-${SHORT_SHA}-${{ github.run_id }}.apk" >> $GITHUB_ENV
          echo "APK_SHA256=$SHA256" >> $GITHUB_ENV
          echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_ENV
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          REPO_URL="https://github.com/brahmkshatriya/echo"
          git fetch upstream --depth=50
          COMMIT_LOGS=$(git log -1 --pretty=format:"● %s ~%an [֍](${REPO_URL}/commit/%H)" $COMMIT_SHA || echo "")
          [ -z "$COMMIT_LOGS" ] && COMMIT_LOGS="● No new commits for this release"
          echo -e "Commits:\n" > commit_log.txt
          echo "$COMMIT_LOGS" | sed 's/●/\n●/g' | sed '/^$/d' >> commit_log.txt
          echo -e "\n---\n### Checksums\n| Variant | SHA-256 |\n| ------- | ------- |\n| Universal | $SHA256 |\n\n" >> commit_log.txt
          echo -e "<img src=\"https://img.shields.io/github/downloads/itsmechinmoy/echo-nightly/total?style=for-the-badge&label=TOTAL%20DOWNLOADS&labelColor=black&color=white\"/> <img src=\"https://img.shields.io/github/downloads/itsmechinmoy/echo-nightly/${TAG_NAME}/total?style=for-the-badge&label=CURRENT%20RELEASE&labelColor=black&color=white\"/>" >> commit_log.txt
      - name: Ensure commit_log.txt exists
        run: |
          if [ ! -f commit_log.txt ]; then
            echo "● No commit logs available" > commit_log.txt
            echo -e "\n---\n### Checksums\n| Variant | SHA-256 |\n| ------- | ------- |\n| Universal | $APK_SHA256 |\n" >> commit_log.txt
          fi
      - name: Debug Release Creation
        if: ${{ steps.compare.outputs.SHOULD_RELEASE == 'true' }}
        run: |
          echo "Checking PAT_TOKEN permissions"
          curl -s -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
               -H "Accept: application/vnd.github+json" \
               https://api.github.com/user | jq .
          echo "Checking repository releases endpoint"
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
                         -H "Accept: application/vnd.github+json" \
                         https://api.github.com/repos/itsmechinmoy/echo-nightly/releases)
          if [[ $(echo "$RESPONSE" | jq -r '.message // "success"') != "success" ]]; then
            echo "Releases API response: $RESPONSE"
          else
            echo "Releases API working correctly"
          fi
      - name: Create or Update GitHub Release
        if: ${{ steps.compare.outputs.SHOULD_RELEASE == 'true' }}
        run: |
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
                         -H "Accept: application/vnd.github+json" \
                         https://api.github.com/repos/itsmechinmoy/echo-nightly/releases)
          if [[ $(echo "$RESPONSE" | jq -r '.message // empty') == "Not Found" ]]; then
            echo "No releases found, proceeding to create a new one"
            RESPONSE="[]"
          elif [[ -z "$RESPONSE" || "$RESPONSE" == "null" ]]; then
            echo "Invalid releases API response, exiting"
            exit 1
          fi
          # Check if release with this tag already exists
          RELEASE_ID=$(echo "$RESPONSE" | jq -r --arg tag "${{ env.TAG_NAME }}" '.[] | select(.tag_name == $tag) | .id')
          BODY=$(cat commit_log.txt | jq -sR .)
          if [ -n "$RELEASE_ID" ] && [ "$RELEASE_ID" != "null" ]; then
            echo "Updating existing release ID: $RELEASE_ID with tag ${{ env.TAG_NAME }}"
            UPDATE_RESPONSE=$(curl -s -X PATCH \
                                   -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
                                   -H "Accept: application/vnd.github+json" \
                                   https://api.github.com/repos/itsmechinmoy/echo-nightly/releases/$RELEASE_ID \
                                   -d "{\"tag_name\":\"${{ env.TAG_NAME }}\",\"target_commitish\":\"${{ env.COMMIT_SHA }}\",\"name\":\"Echo Nightly ${{ env.TAG_NAME }}\",\"body\":$BODY,\"draft\":false,\"prerelease\":true}")
            echo "Update release response: $UPDATE_RESPONSE"
            if [[ $(echo "$UPDATE_RESPONSE" | jq -r '.message // empty') != "empty" ]] && [[ $(echo "$UPDATE_RESPONSE" | jq -r '.id // empty') == "empty" ]]; then
              echo "Failed to update release: $UPDATE_RESPONSE"
              exit 1
            fi
            FINAL_RELEASE_ID=$RELEASE_ID
          else
            echo "Creating new release for commit ${{ env.COMMIT_SHA }} with tag ${{ env.TAG_NAME }}"
            RELEASE_RESPONSE=$(curl -s -X POST \
                                   -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
                                   -H "Accept: application/vnd.github+json" \
                                   https://api.github.com/repos/itsmechinmoy/echo-nightly/releases \
                                   -d "{\"tag_name\":\"${{ env.TAG_NAME }}\",\"target_commitish\":\"${{ env.COMMIT_SHA }}\",\"name\":\"Echo Nightly ${{ env.TAG_NAME }}\",\"body\":$BODY,\"draft\":false,\"prerelease\":true}")
            echo "Create release response: $RELEASE_RESPONSE"
            FINAL_RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id')
            if [[ -z "$FINAL_RELEASE_ID" || "$FINAL_RELEASE_ID" == "null" ]]; then
              echo "Failed to create release: $RELEASE_RESPONSE"
              exit 1
            fi
          fi
          echo "Uploading APK to release ID: $FINAL_RELEASE_ID"
          UPLOAD_RESPONSE=$(curl -s -X POST \
                                -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
                                -H "Accept: application/vnd.github+json" \
                                -H "Content-Type: application/vnd.android.package-archive" \
                                --data-binary "@${{ env.APK_FILE }}" \
                                https://uploads.github.com/repos/itsmechinmoy/echo-nightly/releases/$FINAL_RELEASE_ID/assets?name=${{ env.APK_FILE }})
          echo "Upload APK response: $UPLOAD_RESPONSE"
          if [[ $(echo "$UPLOAD_RESPONSE" | jq -r '.message // empty') != "empty" ]] && [[ $(echo "$UPLOAD_RESPONSE" | jq -r '.id // empty') == "empty" ]]; then
            echo "Failed to upload APK: $UPLOAD_RESPONSE"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      - name: Save and Upload last-sha for future runs
        if: ${{ steps.compare.outputs.SHOULD_RELEASE == 'true' }}
        run: |
          echo "Saving last-sha files:"
          ls -la
          if [[ -f latest_run_id.txt && -f latest_commit_sha.txt ]]; then
            cp latest_run_id.txt last_run_id.txt
            cp latest_commit_sha.txt last_commit_sha.txt
            echo "Copied last-sha files:"
            ls -la last_run_id.txt last_commit_sha.txt
          else
            echo "No latest SHA files found, skipping."
            exit 0
          fi
      - name: Upload last-sha Artifact
        if: ${{ steps.compare.outputs.SHOULD_RELEASE == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: last-sha
          path: |
            last_run_id.txt
            last_commit_sha.txt
          retention-days: 90
      - name: Set up SSH for Codeberg and GitLab
        if: ${{ steps.compare.outputs.SHOULD_RELEASE == 'true' }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -t rsa codeberg.org >> ~/.ssh/known_hosts
          ssh-keyscan -t rsa gitlab.com >> ~/.ssh/known_hosts
      - name: Debug File Presence Before Codeberg
        if: ${{ steps.compare.outputs.SHOULD_RELEASE == 'true' }}
        run: |
          echo "Files before Codeberg step:"
          ls -la
      - name: Prepare and push to Codeberg
        if: ${{ steps.compare.outputs.SHOULD_RELEASE == 'true' }}
        run: |
          TEMP_DIR="temp-$GITHUB_RUN_ID"
          mkdir -p "$TEMP_DIR"
          mv last_run_id.txt last_commit_sha.txt "$TEMP_DIR/" || echo "No last-sha files to move"
          echo "Files in $TEMP_DIR after move:"
          ls -la "$TEMP_DIR"
          git remote add codeberg git@codeberg.org:itsmechinmoy/echo.git
          git fetch --unshallow origin || true
          git fetch codeberg --no-tags
          git rm -f .github/workflows/echo.yml || echo "Workflow file not found, skipping"
          git commit -m "Remove workflow file for Codeberg sync" || echo "No changes to commit"
          rm -rf "${{ env.APK_FILE }}" artifact.zip artifact_contents/ artifact_url.txt commit_log.txt last_run_id.txt last_commit_sha.txt
          git clean -fdx
          git push codeberg main --force
          mv "$TEMP_DIR/last_run_id.txt" "$TEMP_DIR/last_commit_sha.txt" . || echo "No last-sha files to restore"
          echo "Files after restore:"
          ls -la
        env:
          GIT_SSH_COMMAND: ssh -i ~/.ssh/id_ed25519
      - name: Debug File Presence Before GitLab
        if: ${{ steps.compare.outputs.SHOULD_RELEASE == 'true' }}
        run: |
          echo "Files before GitLab step:"
          ls -la
      - name: Prepare and push to GitLab
        if: ${{ steps.compare.outputs.SHOULD_RELEASE == 'true' }}
        run: |
          TEMP_DIR="temp-$GITHUB_RUN_ID"
          mkdir -p "$TEMP_DIR"
          mv last_run_id.txt last_commit_sha.txt "$TEMP_DIR/" || echo "No last-sha files to move"
          echo "Files in $TEMP_DIR after move:"
          ls -la "$TEMP_DIR"
          git remote add gitlab git@gitlab.com:itsmechinmoy/echo.git
          git fetch --unshallow origin || true
          git fetch gitlab --no-tags
          git rm -f .github/workflows/echo.yml || echo "Workflow file not found, skipping"
          git commit -m "Remove workflow file for GitLab sync" || echo "No changes to commit"
          git merge gitlab/main --allow-unrelated-histories -m "Merge gitlab state" || {
            git checkout origin/main -- .
            git add .
            git commit -m "Resolved GitLab merge conflict by keeping GitHub state"
          }
          rm -rf "${{ env.APK_FILE }}" artifact.zip artifact_contents/ artifact_url.txt commit_log.txt last_run_id.txt last_commit_sha.txt
          git clean -fdx
          git push gitlab main
          mv "$TEMP_DIR/last_run_id.txt" "$TEMP_DIR/last_commit_sha.txt" . || echo "No last-sha files to restore"
          echo "Files after restore:"
          ls -la
        env:
          GIT_SSH_COMMAND: ssh -i ~/.ssh/id_ed25519
      - name: Debug File Presence After All Steps
        if: always()
        run: |
          echo "Files after all steps:"
          ls -la
